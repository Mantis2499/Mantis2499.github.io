<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蟹黄の小窝</title>
  
  <subtitle>你这一辈子......有没有为别人拼过命</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-12T12:07:05.909Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Mantis</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python-Chapter8</title>
    <link href="http://example.com/2022/05/11/Python-Chapter8/"/>
    <id>http://example.com/2022/05/11/Python-Chapter8/</id>
    <published>2022-05-11T12:17:05.000Z</published>
    <updated>2022-05-12T12:07:05.909Z</updated>
    
    <content type="html"><![CDATA[<p>​Python中有几个内置模块和方法来处理文件。这些方法被分割为例如os, os.path , shutil 和 pathlib 等多个部分。通过这些操作可以对文件进行读取属性、查看内容、修改、模式匹配等；本文使用Python通过这些操作，实现对文件的操作。</p><span id="more"></span><h3 id="8-1利用-os-列出当前目录的绝对路径，及其下的所有子目录、所有文件"><a href="#8-1利用-os-列出当前目录的绝对路径，及其下的所有子目录、所有文件" class="headerlink" title="8.1利用 os 列出当前目录的绝对路径，及其下的所有子目录、所有文件"></a>8.1利用 os 列出当前目录的绝对路径，及其下的所有子目录、所有文件</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span>(os.path.abspath(<span class="string">&#x27;.&#x27;</span>))           <span class="comment"># 当前IDEL所处的文件夹的绝对路径：&#x27;C:\\Program Files\\python3.9&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(os.path.abspath(<span class="string">&#x27;..&#x27;</span>))           <span class="comment"># 当前所处的文件夹上一级文件夹的绝对路径：&#x27;C:\\Program Files</span></span><br><span class="line">os.listdir()                           <span class="comment"># 列出当前目录下，所有的文件夹及文件，返回一个列表</span></span><br><span class="line">os.listdir(<span class="string">&#x27;/home/mantis/PycharmProjects&#x27;</span>)</span><br><span class="line">y=[f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(<span class="string">r&#x27;./&#x27;</span>)  <span class="keyword">if</span> f.endswith((<span class="string">&#x27;.py&#x27;</span>,<span class="string">&#x27;.txt&#x27;</span>))]            <span class="comment"># r 表示后面的字符不转义</span></span><br><span class="line"><span class="built_in">print</span>(y)                               <span class="comment"># 将当前目录下后缀为py、txt的所有文件增加到列表中，并输出</span></span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1MegImhcjvFFHjy_UGolqexcuEmucruCJ" width height></center><h3 id="8-2利用os-path创建目录、创建多级目录，判断目录、文件是否存在"><a href="#8-2利用os-path创建目录、创建多级目录，判断目录、文件是否存在" class="headerlink" title="8.2利用os.path创建目录、创建多级目录，判断目录、文件是否存在"></a>8.2利用os.path创建目录、创建多级目录，判断目录、文件是否存在</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.mkdir(<span class="string">r&#x27;/home/mantis/PycharmProjects/pythonClass/Chapter8/text0&#x27;</span>)         <span class="comment"># 创建一个目录：home/mantis/PycharmProjects/pythonClass/Chapter8/text0</span></span><br><span class="line">os.makedirs(<span class="string">r&#x27;/home/mantis/PycharmProjects/pythonClass/Chapter8/text0/text01/text02&#x27;</span>)                       <span class="comment"># 一次性创建多级目录</span></span><br><span class="line"><span class="built_in">print</span>(os.path.isdir(<span class="string">r&#x27;/home/mantis/PycharmProjects/pythonClass/Chapter8/text0/text01/text02&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.path.isfile(<span class="string">r&#x27;/home/mantis/PycharmProjects/pythonClass/Chapter8/test_copy.txt&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.path.exists(<span class="string">r&#x27;/home/mantis/PycharmProjects/pythonClass/Chapter8/test_copy.txt&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os.path.exists(<span class="string">r&#x27;/home/mantis/PycharmProjects/pythonClass/Chapter8/&#x27;</span>))</span><br><span class="line">os.path.join(<span class="string">r&#x27;/home/mantis/PycharmProjects/pythonClass/Chapter8/test_copy.txt&#x27;</span>,<span class="string">&#x27;test_copy.txt&#x27;</span>)        <span class="comment"># 将路径和文件链接：&#x27;d:\\python\\test\\test.txt&#x27;</span></span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1jWHjMiWcdIX_C67wNz8JW22e9vQP6eyU" width height></center><h3 id="8-3利用shutil复制、移动目录及文件"><a href="#8-3利用shutil复制、移动目录及文件" class="headerlink" title="8.3利用shutil复制、移动目录及文件"></a>8.3利用shutil复制、移动目录及文件</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">shutil.copyfile(<span class="string">&quot;test.txt&quot;</span>,<span class="string">r&quot;/home/mantis/PycharmProjects/pythonClass/Chapter8//text0/text01/text02/test_copy.txt&quot;</span>)    <span class="comment"># 拷贝当前工作目录下的test.txt至C:\pythonFiles\pythonProject\expr0</span></span><br><span class="line">shutil.move(<span class="string">&quot;test.txt&quot;</span>,<span class="string">r&quot;/home/mantis/PycharmProjects/pythonClass/Chapter8/test_copy.txt&quot;</span>)        <span class="comment"># 将当前工作目录下的test.txt文件移至C:\pythonFiles\pythonProject\expr0test_copy.txt</span></span><br><span class="line">os.remove(<span class="string">r&quot;/home/mantis/PycharmProjects/pythonClass/Chapter8/test_copy.txt&quot;</span>)                               <span class="comment"># 删除指定的文件</span></span><br><span class="line">shutil.copytree(<span class="string">r&quot;/home/mantis/PycharmProjects/pythonClass/Chapter8/&quot;</span>,<span class="string">r&quot;/home/mantis/PycharmProjects/pythonClass/test/&quot;</span>) <span class="comment"># 将/home/mantis/PycharmProjects/pythonClass/Chapter8/下的目录、文件，复制到新路径下</span></span><br></pre></td></tr></table></figure><p>​运行结果</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1TQugo7NAqlCrTSjEL--DZDnCquwEu4R9" width height></center><h3 id="8-3-5一些文件对象处理大概"><a href="#8-3-5一些文件对象处理大概" class="headerlink" title="8.3.5一些文件对象处理大概"></a>8.3.5一些文件对象处理<del>大概</del></h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;a+&#x27;</span>)              <span class="comment"># 追加读写模式，在原文件内容最后追加，无原文件新建</span></span><br><span class="line"><span class="built_in">print</span>(f.tell())                                     <span class="comment"># 打印光标位置,按字符计数</span></span><br><span class="line">f.seek(<span class="number">0</span>)                                            <span class="comment"># 把光标回到开头</span></span><br><span class="line"><span class="built_in">print</span>(f.readline())                            <span class="comment"># 按行读 ：一次默认读取 1 行</span></span><br><span class="line"><span class="built_in">print</span>(f.read(<span class="number">10</span>))                              <span class="comment"># 按字符读：一次读取 10 个字符</span></span><br><span class="line">f.seek(<span class="number">12</span>)                                          <span class="comment"># 把光标移动到12个字符的位置</span></span><br><span class="line"><span class="built_in">print</span>(f.encoding)                             <span class="comment"># 打印文件编码</span></span><br><span class="line">f.flush()                      <span class="comment"># 当往文件写内容的时候，会有一个缓存，达到一个时间，一次往文件写入。</span></span><br><span class="line">                                   <span class="comment"># 如果这时候断电可能内容并没有写入成功，flush刷新会立即执行</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1jG9UtRnXpYcRNMEH7yM0jgHPZphAOkkB" width height></center><h3 id="8-4向文本文件中写入内容，然后再读出"><a href="#8-4向文本文件中写入内容，然后再读出" class="headerlink" title="8.4向文本文件中写入内容，然后再读出"></a>8.4向文本文件中写入内容，然后再读出</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;我在学Python.\n文本文件的读写\n&#x27;</span>            <span class="comment"># 转义字符\n表示换行</span></span><br><span class="line">s2 = [<span class="string">&#x27;人生苦短&#x27;</span>,<span class="string">&#x27;我学Python.&#x27;</span>]                             <span class="comment"># 所有元素，作为一行，添加</span></span><br><span class="line">s3 = [<span class="string">&#x27;人生苦短\n&#x27;</span>,<span class="string">&#x27;我学Python\n&#x27;</span>]                       <span class="comment"># 元素后面有换行符，可作为多行，添加</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fp:                         <span class="comment"># w 模式会清空文件原有内容</span></span><br><span class="line">    fp.write(s1)                                                          <span class="comment"># write(s1)：将字符串s1 一次性写入</span></span><br><span class="line">    fp.writelines(s2)                                                   <span class="comment"># writelines (s2)：将列表s2元素迭代写入</span></span><br><span class="line">    fp.writelines(s3)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>) <span class="keyword">as</span> fp:                                 <span class="comment"># 默认按 r 模式打开文件</span></span><br><span class="line">    <span class="built_in">print</span>(fp.read())     </span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/19mj3bHMSfc0SXhRpOByv1yX1brVFFfC5" width height></center><h4 id="P-S：只是在文件末尾添加，可用a模式打开文件。此时，若文件不存在，也会自动创建它"><a href="#P-S：只是在文件末尾添加，可用a模式打开文件。此时，若文件不存在，也会自动创建它" class="headerlink" title="P.S：只是在文件末尾添加，可用a模式打开文件。此时，若文件不存在，也会自动创建它"></a>P.S：只是在文件末尾添加，可用a模式打开文件。此时，若文件不存在，也会自动创建它</h4><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;我在学Python.\n文本文件的读取\n&#x27;</span>          <span class="comment"># 转义字符\n表示换行</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;a+&#x27;</span>) <span class="keyword">as</span> fp:                    <span class="comment"># a+ 模式会保留原内容，并在文件末尾添加内容</span></span><br><span class="line">    fp.write(s)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    r = fp.readlines()                                             <span class="comment"># readlines()不传参数，默认读取所有行，r为列表</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(r))</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1bcvafgdWmX_qHLs6TXv6awreyl_6AVCR" width height></center><center><img src="https://lh3.googleusercontent.com/u/0/d/1uish8sDd80cMP-21T_RuajYHyDD2hrsb" width height></center><h3 id="8-6readline-或readlines-遍历并输出文本文件的内容"><a href="#8-6readline-或readlines-遍历并输出文本文件的内容" class="headerlink" title="8.6readline()或readlines()遍历并输出文本文件的内容"></a>8.6readline()或readlines()遍历并输出文本文件的内容</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">j = <span class="number">0</span>                                                                                              <span class="comment"># j用于计数</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;红楼梦.txt&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>) <span class="keyword">as</span> fp:       <span class="comment"># 打开文本文件，with语句块内自动关闭</span></span><br><span class="line">    <span class="keyword">while</span> j &lt; <span class="number">10</span>:</span><br><span class="line">        line = fp.readline()                                                  <span class="comment"># 每次读取一行，返回的字符串为该行内容</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;(&quot;</span> + <span class="built_in">str</span>(j) + <span class="string">&quot;)&quot;</span>,line)</span><br><span class="line">        j += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1sS7TnYARbVNXgzzs2xx3GewKqT6QgLW-" width height></center><h3 id="8-7编写程序，当前工作目录下所有文本文件中，含有字符串“password”的所有文件名，写入到一个文件中"><a href="#8-7编写程序，当前工作目录下所有文本文件中，含有字符串“password”的所有文件名，写入到一个文件中" class="headerlink" title="8.7编写程序，当前工作目录下所有文本文件中，含有字符串“password”的所有文件名，写入到一个文件中"></a>8.7编写程序，当前工作目录下所有文本文件中，含有字符串“password”的所有文件名，写入到一个文件中</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">y = [f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(<span class="string">&#x27;/home/mantis/PycharmProjects/pythonClass/Chapter8&#x27;</span>) <span class="keyword">if</span> f.endswith(<span class="string">&#x27;.txt&#x27;</span>)]     <span class="comment"># 列表推导式： 根目录下所有“.txt”的文本文件</span></span><br><span class="line">x = []                                                                                  <span class="comment"># 定义空列表，将查找成功的文件名，添加进去</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> y:                               <span class="comment"># ------------ 对所有文本文件名进行迭代 ---------------------------------------------------</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/home/mantis/PycharmProjects/pythonClass/Chapter8/&#x27;</span>+ f, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> fp:        <span class="comment"># 用with语句块处理打开的文件</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> fp:                                                            <span class="comment"># 对打开的文件，逐行读取</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> line:                                                    <span class="comment"># 若字符串&#x27;密码&#x27;在该行里</span></span><br><span class="line">                x.append(f)                                                       <span class="comment"># 将文件名添加到列表中</span></span><br><span class="line">                <span class="keyword">break</span>                                                                 <span class="comment"># 跳出本轮循环，开始下一轮循环</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;/home/mantis/PycharmProjects/pythonClass/Chapter8/密码存储文件名.txt&#x27;</span>, <span class="string">&#x27;a+&#x27;</span> ,encoding=<span class="string">&#x27;utf8&#x27;</span>)    <span class="comment"># 追加模式打开，若文件不存在，创建之</span></span><br><span class="line">f.writelines(x)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1fTtVOcNnWrOZOQT7h309d3Uvbg5ET0Gz" width height></center><center><img src="https://lh3.googleusercontent.com/u/0/d/19pgs3WC6-_a1ylq31Zd2owFkscgbjXri" width height></center><h3 id="8-8将图片文件“John·F·Kennedy-jpg”写入到新文件“John·F·Kennedy-2-jpg”中"><a href="#8-8将图片文件“John·F·Kennedy-jpg”写入到新文件“John·F·Kennedy-2-jpg”中" class="headerlink" title="8.8将图片文件“John·F·Kennedy.jpg”写入到新文件“John·F·Kennedy_2.jpg”中"></a>8.8将图片文件“John·F·Kennedy.jpg”写入到新文件“John·F·Kennedy_2.jpg”中</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;/home/mantis/PycharmProjects/pythonClass/Chapter8/John·F·Kennedy.jpg&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    data = fp.read()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(data))                                                              <span class="comment">#  &lt;class &#x27;bytes&#x27;&gt;</span></span><br><span class="line">    <span class="built_in">print</span>(data)                                                                        <span class="comment">#  Squeezed text (2041 lines)</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;John·F·Kennedy_2.jpg&#x27;</span>,<span class="string">&#x27;wb+&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;图片文件，读写成功！&quot;</span>)</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1CumHpy-SQquyH98KNzEFfQ5DWbE571w_" width height></center><p>​<del>乐.jpg</del></p><h3 id="8-9使用pickle的dump-方法序列化数据，并写入dat二进制文件中"><a href="#8-9使用pickle的dump-方法序列化数据，并写入dat二进制文件中" class="headerlink" title="8.9使用pickle的dump()方法序列化数据，并写入dat二进制文件中"></a>8.9使用pickle的dump()方法序列化数据，并写入dat二进制文件中</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">y = (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">z = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">d = &#123;<span class="string">&#x27;学号&#x27;</span>:<span class="string">&#x27;01&#x27;</span>, <span class="string">&#x27;姓名&#x27;</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br><span class="line">data = (<span class="number">100</span>, <span class="string">&#x27;Python&#x27;</span>, x, y, z, d)                            <span class="comment"># 将各种数据变量，放在一个元组中</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test_pickle.dat&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">try</span>:                                                  <span class="comment"># ----------------------  处理意外 -------------------------</span></span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> data:                                                  <span class="comment"># 对data中的元素进行迭代</span></span><br><span class="line">            pickle.dump(d, f)                                       <span class="comment"># 对每一个元素，进行序列化并写入文件对象</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;写dat文件成功。&#x27;</span>)                             <span class="comment"># 迭代完成后，保存文件，并自动关闭文件</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;写dat文件失败。&#x27;</span>)</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1iugPTkP6hXzPwa8Bfxu-K3VDEfxpkFAh" width height></center><h3 id="8-10-使用pickle的load-方法反序列化数据，并输出dat二进制文件内容"><a href="#8-10-使用pickle的load-方法反序列化数据，并输出dat二进制文件内容" class="headerlink" title="8.10 使用pickle的load()方法反序列化数据，并输出dat二进制文件内容"></a>8.10 使用pickle的load()方法反序列化数据，并输出dat二进制文件内容</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test_pickle.dat&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    end = <span class="literal">False</span>                                              <span class="comment"># 定义一个逻辑变量，判断文件是否到了结尾</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> end:                                         <span class="comment"># 一次dump()方法，对应一次load()方法</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            x = pickle.load(f)                            <span class="comment"># 读取并反序列化每个数据</span></span><br><span class="line">            <span class="built_in">print</span>(x)                                           <span class="comment"># 输出的内容，与原序列化前的内容一致</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            end = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1UP150qa9MlpUSM9681at6TfG6Wgf52gd" width height></center><h3 id="8-11读取“历年新生人口和死亡人口-xls”的内容。该文件收录了1949-2016年期间，我国部分地区新生人口、死亡人口、净增人口数据"><a href="#8-11读取“历年新生人口和死亡人口-xls”的内容。该文件收录了1949-2016年期间，我国部分地区新生人口、死亡人口、净增人口数据" class="headerlink" title="8.11读取“历年新生人口和死亡人口.xls”的内容。该文件收录了1949-2016年期间，我国部分地区新生人口、死亡人口、净增人口数据"></a>8.11读取“历年新生人口和死亡人口.xls”的内容。该文件收录了1949-2016年期间，我国部分地区新生人口、死亡人口、净增人口数据</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line">wb = xlrd.open_workbook(<span class="string">&#x27;/home/mantis/PycharmProjects/pythonClass/Chapter8/历年新生人口和死亡人口.xls&#x27;</span>)</span><br><span class="line">sheet = wb.sheet_by_index(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(sheet.nrows):</span><br><span class="line">    row = sheet.row_values(i)</span><br><span class="line">    <span class="built_in">print</span>(row)</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/12xE9pUM5w_UiI-4N04WJrmxwlOOlBhAG" width height></center><h3 id="8-12用-openpyxl-库创建-xlsx-文件，并写入数据"><a href="#8-12用-openpyxl-库创建-xlsx-文件，并写入数据" class="headerlink" title="8.12用 openpyxl 库创建 xlsx 文件，并写入数据"></a>8.12用 openpyxl 库创建 xlsx 文件，并写入数据</h3><p>​代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import openpyxl</span><br><span class="line">wb = openpyxl.Workbook()                    # 创建Workbook，并默认会创建一个空表,名称为：Sheet</span><br><span class="line">ws1 = wb.active                                                     # 获取默认的sheet，并激活</span><br><span class="line">ws1.title = &#x27;Sheet1&#x27;                                                # 设置Sheet名称</span><br><span class="line">ws1[&#x27;A1&#x27;] = &#x27;姓名&#x27;                                                 # 给单个单元格一个列名</span><br><span class="line">ws1[&#x27;B1&#x27;] = &#x27;年龄&#x27;</span><br><span class="line">ws1.append([&#x27;张三&#x27;, 18])                                       # 写入多个单元格(从有数据的行的下一行写入)</span><br><span class="line">ws1.append([&#x27;李四&#x27;, 19])</span><br><span class="line">ws2 = wb.create_sheet(&#x27;Sheet2&#x27;)                          # 创建一个新sheet，可以指定名称</span><br><span class="line">ws3 = wb.copy_worksheet(wb[&#x27;Sheet1&#x27;])            # 复制Sheet1，新sheet名称为Sheet1 Copy</span><br><span class="line">print(wb.sheetnames)                                            # 打印所有表名</span><br><span class="line">wb.save(&#x27;test.xlsx&#x27;)       </span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1eMSeUWXkslY2RVqWIKVbDcGMH3twyYH-" width height></center><center><img src="https://lh3.googleusercontent.com/u/0/d/1zTIrObLFEZLVh5cyf-xomr8xdYYV927E" width height></center>]]></content>
    
    
    <summary type="html">&lt;p&gt;​		Python中有几个内置模块和方法来处理文件。这些方法被分割为例如os, os.path , shutil 和 pathlib 等多个部分。通过这些操作可以对文件进行读取属性、查看内容、修改、模式匹配等；本文使用Python通过这些操作，实现对文件的操作。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机科学" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python中Matplotlib库与数据可视化</title>
    <link href="http://example.com/2022/05/09/Python-Chapter11/"/>
    <id>http://example.com/2022/05/09/Python-Chapter11/</id>
    <published>2022-05-09T13:23:15.000Z</published>
    <updated>2022-05-12T12:07:43.789Z</updated>
    
    <content type="html"><![CDATA[<p>​Matplotlib 可能是 Python 2D-绘图领域使用最广泛的套件。它能让使用者很轻松地将数据图形化，并且提供多样化的输出格式；可与 NumPy 一起使用，提供了一种有效的 MatLab 开源替代方案。；它也可以和图形工具包一起使用，如 PyQt 和 wxPython。通过该工具包可以绘制线图、散点图、等高线图、条形图、柱状图、3D 图形、、甚至是图形动画等等。</p><p>​本篇将通过最近学习的Matplotlib 对数据进行统计绘制操作。</p><p>​<strong>（PS：因环境为Unbuntu22.04,未在Matplotlib 内实装中文字体；故图像有一定乱码问题，目前补救中……）</strong></p><span id="more"></span><h3 id="11-1给定11个点坐标，绘制简单折线图-x-y"><a href="#11-1给定11个点坐标，绘制简单折线图-x-y" class="headerlink" title="11.1给定11个点坐标，绘制简单折线图 (x,y)"></a>11.1给定11个点坐标，绘制简单折线图 (x,y)</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt               <span class="comment"># 引入绘图库</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">11</span>)                                     <span class="comment"># 从0开始，步长为1 的11个整数</span></span><br><span class="line">y = np.array([<span class="number">0.15</span>, <span class="number">0.16</span>, <span class="number">0.14</span>, <span class="number">0.17</span>, <span class="number">0.12</span>, <span class="number">0.16</span>, <span class="number">0.1</span>,</span><br><span class="line">             <span class="number">0.08</span>, <span class="number">0.05</span>, <span class="number">0.07</span>, <span class="number">0.06</span>])        <span class="comment"># 取11个数</span></span><br><span class="line">plt.plot(x, y, color=<span class="string">&#x27;red&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>)       <span class="comment"># 绘制11个点的折线图，红色、点型</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1kCX1KE2Cd4-RbPOjM-fZbTLVLdm-ky5F" width height></center><h3 id="11-2绘制散点图-y-x3D-sin-x"><a href="#11-2绘制散点图-y-x3D-sin-x" class="headerlink" title="11.2绘制散点图 y &#x3D; sin(x)"></a>11.2绘制散点图 y &#x3D; sin(x)</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将[0,2*PI]等分为30份的一维数组</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">30</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">plt.scatter(x, y,  marker=<span class="string">&#x27;.&#x27;</span>, color=<span class="string">&#x27;blue&#x27;</span>)  <span class="comment"># marker 点型, 颜色color为blue</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1iNtTSBb2fCCQJjpHNCBYTIYyze1rMOKI" width height></center><h3 id="11-3绘制4个子图"><a href="#11-3绘制4个子图" class="headerlink" title="11.3绘制4个子图"></a>11.3绘制4个子图</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">fig = plt.figure(figsize=(<span class="number">8</span>, <span class="number">6</span>), dpi=<span class="number">80</span>)</span><br><span class="line"><span class="comment"># (2,2)表示将画布分成2行,2列,可画4个子图</span></span><br><span class="line">ax1 = fig.add_subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">ax1.plot(x, x)</span><br><span class="line">ax1.legend([<span class="string">&#x27;y=x&#x27;</span>])</span><br><span class="line">ax2 = fig.add_subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)                                  <span class="comment"># 这是第2个子图</span></span><br><span class="line">ax2.plot(x, -x, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">ax2.legend([<span class="string">&#x27;y=-x&#x27;</span>])</span><br><span class="line">ax3 = fig.add_subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)                                 <span class="comment"># 这是第3个子图</span></span><br><span class="line">ax3.plot(x, x ** <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">ax3.legend([<span class="string">&#x27;y=x*x&#x27;</span>])</span><br><span class="line">ax4 = fig.add_subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>)                                 <span class="comment"># 这是第4个子图</span></span><br><span class="line">ax4.plot(x, np.log(x), <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">ax4.legend([<span class="string">&#x27;y=log(x)&#x27;</span>], loc=<span class="string">&#x27;lower right&#x27;</span>)             <span class="comment"># 图例在右下方</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1N_xaRIHLvRGHeH-2EVuoWfBJCY7KeO65" width height></center><h3 id="11-4用画布的各种设置，绘制折线图：y-x3D-sin-x-，z-x3D-cos-x"><a href="#11-4用画布的各种设置，绘制折线图：y-x3D-sin-x-，z-x3D-cos-x" class="headerlink" title="11.4用画布的各种设置，绘制折线图：y &#x3D; sin(x)，z &#x3D; cos(x)"></a>11.4用画布的各种设置，绘制折线图：y &#x3D; sin(x)，z &#x3D; cos(x)</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span>                      <span class="comment"># 设置中文显示</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">0.1</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line"><span class="comment"># 画布大小：宽8英寸，高4英寸</span></span><br><span class="line">f = plt.figure(figsize=(<span class="number">8</span>, <span class="number">4</span>), dpi=<span class="number">80</span>)</span><br><span class="line"><span class="comment"># 设置坐标轴颜色</span></span><br><span class="line">f.set_facecolor((<span class="number">0.92</span>, <span class="number">0.92</span>, <span class="number">0.96</span>))</span><br><span class="line">plt.title(<span class="string">&#x27;正弦、余弦函数图形&#x27;</span>, fontsize=<span class="number">12</span>)                  <span class="comment"># 标题 ，字体大小：12</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;x 变量&#x27;</span>, fontsize=<span class="number">12</span>)                                       <span class="comment"># x轴标签</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;y 变量&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line"><span class="comment"># 确定x轴范围</span></span><br><span class="line">plt.xlim((<span class="number">0</span>, <span class="number">6.6</span>))</span><br><span class="line">plt.ylim((-<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment"># 确定 x 轴刻度</span></span><br><span class="line">plt.xticks(np.arange(<span class="number">0</span>, <span class="number">6.6</span>, <span class="number">0.4</span>))</span><br><span class="line">plt.yticks(np.arange(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0.2</span>))</span><br><span class="line">plt.plot(x, y, marker=<span class="string">&#x27;o&#x27;</span>, linestyle=<span class="string">&#x27;-&#x27;</span>,</span><br><span class="line">         linewidth=<span class="number">1.2</span>)        <span class="comment"># 绘制正弦折线图：点型、线型、线宽</span></span><br><span class="line">y = np.cos(x)</span><br><span class="line">plt.plot(x, y, color=<span class="string">&#x27;r&#x27;</span>, marker=<span class="string">&#x27;,&#x27;</span>, linestyle=<span class="string">&#x27;-&#x27;</span>,</span><br><span class="line">         linewidth=<span class="number">1.2</span>)    <span class="comment"># 绘制余弦：颜色、点型、线型、线宽</span></span><br><span class="line">plt.legend([<span class="string">&#x27;y=sin(x)&#x27;</span>, <span class="string">&#x27;y=cos(x)&#x27;</span>],</span><br><span class="line">           fontsize=<span class="number">12</span>)                            <span class="comment"># 设置图例</span></span><br><span class="line"><span class="comment"># 在点（3.2,sin(3.2)+0.08）处添加文本</span></span><br><span class="line">plt.text(<span class="number">3.2</span>, np.sin(<span class="number">3.2</span>)+<span class="number">0.08</span>, <span class="string">&#x27;y = sin(3.2)&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1wsIBckVzGOcH4aG3R5GRimkWRBENBCjJ" width height></center><h3 id="11-5绘制沪指综合指数收盘数据趋势图"><a href="#11-5绘制沪指综合指数收盘数据趋势图" class="headerlink" title="11.5绘制沪指综合指数收盘数据趋势图"></a>11.5绘制沪指综合指数收盘数据趋势图</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span>                        <span class="comment"># 设置中文显示</span></span><br><span class="line">wb = xlrd.open_workbook(<span class="string">&quot;SH000001.xls&quot;</span>)                <span class="comment"># 沪指综合指数交易数据</span></span><br><span class="line"><span class="comment"># 通过索引获取sheet表格</span></span><br><span class="line">sheet = wb.sheet_by_index(<span class="number">0</span>)</span><br><span class="line">d = sheet.col_values(<span class="number">0</span>)[<span class="number">3100</span>:<span class="number">3400</span>]                                   <span class="comment"># 第1列：交易日期</span></span><br><span class="line"><span class="comment"># 第5列：沪指收盘指数</span></span><br><span class="line">y = sheet.col_values(<span class="number">4</span>)[<span class="number">3100</span>:<span class="number">3400</span>]</span><br><span class="line"><span class="comment"># 设置画布大小</span></span><br><span class="line">f = plt.figure(figsize=(<span class="number">8</span>, <span class="number">4</span>), dpi=<span class="number">80</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;交易日期&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;沪指综合收盘指数&#x27;</span>, fontsize=<span class="number">12</span>)                    <span class="comment"># 添加纵轴标签</span></span><br><span class="line">x = <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(y))</span><br><span class="line">t = []</span><br><span class="line"></span><br><span class="line">plt.plot(x, y, marker=<span class="string">&#x27;.&#x27;</span>, c=<span class="string">&#x27;blue&#x27;</span>)                           <span class="comment"># 绘制折线图</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(d)):                                           <span class="comment"># 交易日期 ： 年月日之间加点“.”</span></span><br><span class="line">    a = <span class="built_in">str</span>(<span class="built_in">int</span>(d[i]))</span><br><span class="line">    b = a[<span class="number">0</span>:<span class="number">4</span>] + <span class="string">&quot;.&quot;</span> + a[<span class="number">4</span>:<span class="number">6</span>] + <span class="string">&quot;.&quot;</span> + a[<span class="number">6</span>:<span class="number">8</span>]</span><br><span class="line">    t.append(b)</span><br><span class="line"><span class="comment"># rotation=45：旋转45度</span></span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="number">0</span>, <span class="number">300</span>, <span class="number">15</span>), t[<span class="number">0</span>:<span class="number">300</span>:<span class="number">15</span>], rotation=<span class="number">45</span>)</span><br><span class="line">date1 = t[<span class="number">0</span>]</span><br><span class="line">date2 = t[-<span class="number">1</span>]</span><br><span class="line">f.set_facecolor((<span class="number">0.92</span>, <span class="number">0.92</span>, <span class="number">0.96</span>))                      <span class="comment"># 设置坐标轴颜色</span></span><br><span class="line">plt.title(<span class="string">&#x27;沪指综合收盘指数&#x27;</span>+<span class="string">&#x27;(日期：&#x27;</span> + date1 + <span class="string">&#x27;-&#x27;</span> + date2+<span class="string">&#x27;)&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">i_min, Min = np.argmin(y), np.<span class="built_in">min</span>(y)</span><br><span class="line">i_max, Max = np.argmax(y), np.<span class="built_in">max</span>(y)</span><br><span class="line">plt.text(i_max+<span class="number">3</span>, Max-<span class="number">10</span>, <span class="built_in">str</span>(Max)+<span class="string">&#x27;(最高点)&#x27;</span>,</span><br><span class="line">         color=<span class="string">&#x27;r&#x27;</span>, fontsize=<span class="number">12</span>)                <span class="comment"># 最高点</span></span><br><span class="line">plt.text(i_min-<span class="number">75</span>, Min+<span class="number">6</span>, <span class="built_in">str</span>(Min)+<span class="string">&#x27;(最低点)&#x27;</span>,</span><br><span class="line">         color=<span class="string">&#x27;r&#x27;</span>, fontsize=<span class="number">12</span>)                 <span class="comment"># 最低点</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1hTbvORoJwbfr4QOuN6QP0D108wUSv1MC" width height></center><h3 id="11-6绘制y-x3D-x-3-散点图（10个点）"><a href="#11-6绘制y-x3D-x-3-散点图（10个点）" class="headerlink" title="11.6绘制y &#x3D; x **3 散点图（10个点）"></a>11.6绘制y &#x3D; x **3 散点图（10个点）</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">16</span>, <span class="number">10</span>)                    <span class="comment"># 把[0,16]分为10等份</span></span><br><span class="line">y = x**<span class="number">3</span></span><br><span class="line">c = []                                                    <span class="comment"># 颜色列表</span></span><br><span class="line">size = []                                                <span class="comment"># 大小列表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    size.append(<span class="number">20</span>+i**<span class="number">3</span>)  <span class="comment"># i越大，点的形状越大</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:                                  <span class="comment"># 能被 2 整数</span></span><br><span class="line">        c.append(<span class="string">&#x27;red&#x27;</span>)                           <span class="comment"># 偶数: 红色</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        c.append(<span class="string">&#x27;blue&#x27;</span>)                          <span class="comment"># 奇数: 蓝色</span></span><br><span class="line">plt.scatter(x, y, color=c, s=size)            <span class="comment"># 散点图</span></span><br><span class="line">plt.legend([<span class="string">&#x27;y=x^3&#x27;</span>], fontsize=<span class="number">10</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1AT-clMSBd5s1g9fkRwJs6DFBZzcsGh3D" width height></center><h3 id="11-7人均消费金额y与人均国民收入x之间的散点图"><a href="#11-7人均消费金额y与人均国民收入x之间的散点图" class="headerlink" title="11.7人均消费金额y与人均国民收入x之间的散点图"></a>11.7人均消费金额y与人均国民收入x之间的散点图</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">wb = xlrd.open_workbook(<span class="string">&quot;人均消费金额与人均国民收入.xls&quot;</span>)</span><br><span class="line"><span class="comment"># 通过索引获取表格</span></span><br><span class="line">sheet = wb.sheet_by_index(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 获取第2列内容：人均国民收入</span></span><br><span class="line">col_1 = sheet.col_values(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 获取第3列内容：人均收费金额</span></span><br><span class="line">col_2 = sheet.col_values(<span class="number">3</span>)</span><br><span class="line">x = col_1[<span class="number">1</span>:<span class="number">21</span>]</span><br><span class="line"><span class="comment"># 获取第1行至20行数据</span></span><br><span class="line">y = col_2[<span class="number">1</span>:<span class="number">21</span>]</span><br><span class="line"><span class="comment"># 设置图片大小</span></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">5</span>))</span><br><span class="line">plt.title(<span class="string">&#x27;人均国民收入与人均消费金额散点图&#x27;</span>, fontsize=<span class="number">15</span>)     <span class="comment"># 标题</span></span><br><span class="line"><span class="comment"># 设置x标签及字体大小</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;人均国民收入 x (元)&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;人均消费金额 y (元)&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line"><span class="comment"># 散点图：marker表示点的形状</span></span><br><span class="line">plt.scatter(x, y, color=<span class="string">&#x27;blue&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1Db38AfYC6PxnHxizttI3UhEif5dnGutX" width height></center><h3 id="11-8logistic回归经典二分类数据集"><a href="#11-8logistic回归经典二分类数据集" class="headerlink" title="11.8logistic回归经典二分类数据集"></a>11.8logistic回归经典二分类数据集</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loadDataSet</span>():</span><br><span class="line">    x1 = []</span><br><span class="line">    y1 = []</span><br><span class="line">    x2 = []</span><br><span class="line">    y2 = []</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;testSet.txt&#x27;</span>)                                 <span class="comment"># 打开文本文件</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():                                   <span class="comment"># 按行迭代读取数据</span></span><br><span class="line">        lineList = line.strip().split()                        <span class="comment"># 按默认字符（空格）拆分数据</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(lineList[<span class="number">2</span>]) == <span class="number">0</span>:                               <span class="comment"># 类别0 的点</span></span><br><span class="line">            x1.append(<span class="built_in">float</span>(lineList[<span class="number">0</span>]))</span><br><span class="line">            y1.append(<span class="built_in">float</span>(lineList[<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">else</span>:                                                              <span class="comment"># 类别1的点</span></span><br><span class="line">            x2.append(<span class="built_in">float</span>(lineList[<span class="number">0</span>]))</span><br><span class="line">            y2.append(<span class="built_in">float</span>(lineList[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">return</span> x1, y1, x2, y2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二维点（x,y）的分类: 0 或 1</span></span><br><span class="line">x1, y1, x2, y2 = loadDataSet()</span><br><span class="line"><span class="comment"># 绘图时可以显示中文</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">plt.title(<span class="string">&#x27;二维随机变量（x,y）散点图分类&#x27;</span>, fontsize=<span class="number">12</span>)       <span class="comment"># 标题</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;随机变量 x &#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;随机变量 y &#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.scatter(x1, y1, color=<span class="string">&#x27;red&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>)            <span class="comment"># 类别为0的点：散点图，颜色red，点型：o</span></span><br><span class="line">plt.scatter(x2, y2, color=<span class="string">&#x27;blue&#x27;</span>, marker=<span class="string">&#x27;+&#x27;</span>)          <span class="comment"># 类别为1的点：散点图，颜色blue，点型：+</span></span><br><span class="line">plt.legend([<span class="string">&#x27;类别0&#x27;</span>, <span class="string">&#x27;类别1&#x27;</span>], loc=<span class="string">&#x27;upper left&#x27;</span>)      <span class="comment"># 设置图例，位置：左上方</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/19oxjJq68KZqNQ65W5hES3elvMs-wDWna" width height></center><h3 id="11-9-1绘制：随机生成10000数据，服从均值为0，方差为1的正态分布的频率直方图"><a href="#11-9-1绘制：随机生成10000数据，服从均值为0，方差为1的正态分布的频率直方图" class="headerlink" title="11.9.1绘制：随机生成10000数据，服从均值为0，方差为1的正态分布的频率直方图"></a>11.9.1绘制：随机生成10000数据，服从均值为0，方差为1的正态分布的频率直方图</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">4</span>), dpi=<span class="number">80</span>)</span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">d = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, <span class="number">10000</span>)            <span class="comment"># 生成10000个标准正态分布数据</span></span><br><span class="line">n, bins, patches = plt.hist(</span><br><span class="line">    d, <span class="number">30</span>, density=<span class="number">0</span>, facecolor=<span class="string">&#x27;blue&#x27;</span>, alpha=<span class="number">0.8</span>, edgecolor=<span class="string">&#x27;white&#x27;</span>, lw=<span class="number">1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1jmGpCEvih17JobsxbOysobHkEkKbcXLN" width height></center><h3 id="11-9-2绘制：服从均值为0，方差为1的正态分布的概率密度直方拟合图"><a href="#11-9-2绘制：服从均值为0，方差为1的正态分布的概率密度直方拟合图" class="headerlink" title="11.9.2绘制：服从均值为0，方差为1的正态分布的概率密度直方拟合图"></a>11.9.2绘制：服从均值为0，方差为1的正态分布的概率密度直方拟合图</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">4</span>), dpi=<span class="number">80</span>)</span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">d = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, <span class="number">10000</span>)            <span class="comment"># 生成10000个标准正态分布数据</span></span><br><span class="line">n, bins, patches = plt.hist(</span><br><span class="line">    d, <span class="number">30</span>, density=<span class="number">1</span>, facecolor=<span class="string">&#x27;blue&#x27;</span>, alpha=<span class="number">0.8</span>, edgecolor=<span class="string">&#x27;white&#x27;</span>, lw=<span class="number">1</span>)</span><br><span class="line">y = np.exp(-<span class="number">0.5</span>*bins*bins)/np.sqrt(<span class="number">2</span>*np.pi)       <span class="comment"># 概率密度值</span></span><br><span class="line"><span class="comment"># 概率密度折线图</span></span><br><span class="line">plt.plot(bins, y, <span class="string">&#x27;r-&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">r&#x27;Histogram of IQ: $\mu=0$, $\sigma=1$&#x27;</span>)  <span class="comment"># 用专用格式化符号，添加标题，r表示不转义</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1LZ8oRmmJi2pDR7os4p0zejt8f0F-Gf80" width height></center><h3 id="11-10文件高数线代考试成绩-xls包含了某年级同学的考试成绩。根据这些成绩，绘制频率直方图"><a href="#11-10文件高数线代考试成绩-xls包含了某年级同学的考试成绩。根据这些成绩，绘制频率直方图" class="headerlink" title="11.10文件高数线代考试成绩.xls包含了某年级同学的考试成绩。根据这些成绩，绘制频率直方图"></a>11.10文件高数线代考试成绩.xls包含了某年级同学的考试成绩。根据这些成绩，绘制频率直方图</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wb = xlrd.open_workbook(<span class="string">&quot;高数线代考试成绩.xls&quot;</span>)</span><br><span class="line">sheet = wb.sheet_by_index(<span class="number">0</span>)                              <span class="comment"># 通过索引获取sheet表格</span></span><br><span class="line">col_2 = sheet.col_values(<span class="number">3</span>)                                    <span class="comment"># 获取第3列内容：考试成绩</span></span><br><span class="line">x = np.array(col_2[<span class="number">1</span>:], dtype=<span class="built_in">float</span>)                     <span class="comment"># 考试成绩</span></span><br><span class="line">f = plt.figure(figsize=(<span class="number">8</span>, <span class="number">4</span>), dpi=<span class="number">80</span>)                        <span class="comment"># 设置画布大小</span></span><br><span class="line">f.set_facecolor((<span class="number">0.92</span>, <span class="number">0.92</span>, <span class="number">0.96</span>))                            <span class="comment"># 设置坐标轴颜色</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span>          <span class="comment"># 设置中文显示</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">n, bins, patches = plt.hist(</span><br><span class="line">    x, <span class="number">10</span>, density=<span class="number">1</span>, facecolor=<span class="string">&#x27;blue&#x27;</span>, edgecolor=<span class="string">&#x27;white&#x27;</span>, lw=<span class="number">1</span>, alpha=<span class="number">0.75</span>)</span><br><span class="line">mu = np.mean(x)                                                    <span class="comment"># 平均值</span></span><br><span class="line">sigma = np.std(x)                                                    <span class="comment"># 标准差</span></span><br><span class="line">y = np.exp(-<span class="number">0.5</span>*(bins-mu)*(bins-mu)/(sigma**<span class="number">2</span>))/(np.sqrt(<span class="number">2</span>*np.pi)*sigma)  <span class="comment"># 密度值</span></span><br><span class="line"><span class="comment"># 概率密度折线拟合图</span></span><br><span class="line">plt.plot(bins, y, <span class="string">&#x27;r-&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;高等数学考试成绩频率直方图&#x27;</span> + <span class="string">&#x27;，人数：&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(x)))</span><br><span class="line">plt.legend([<span class="string">r&#x27;正态分布: $\mu=%.2f$, $\sigma=%.2f$&#x27;</span> % (mu, sigma)])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/16Tb9AbCtNrSqRMqacLS0YaFkJAfiZ-xB" width height></center><h3 id="11-11根据文件《普通高校毕业生人数、考研报考人数、考研录取人数-xls》，绘制考研人数的条形图"><a href="#11-11根据文件《普通高校毕业生人数、考研报考人数、考研录取人数-xls》，绘制考研人数的条形图" class="headerlink" title="11.11根据文件《普通高校毕业生人数、考研报考人数、考研录取人数.xls》，绘制考研人数的条形图"></a>11.11根据文件《普通高校毕业生人数、考研报考人数、考研录取人数.xls》，绘制考研人数的条形图</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">x = (<span class="string">&#x27;2016&#x27;</span>, <span class="string">&#x27;2017&#x27;</span>, <span class="string">&#x27;2018&#x27;</span>, <span class="string">&#x27;2019&#x27;</span>, <span class="string">&#x27;2020&#x27;</span>)    <span class="comment"># 条形图标签数据：年份（对应x轴）</span></span><br><span class="line">y = [<span class="number">177</span>, <span class="number">201</span>, <span class="number">238</span>, <span class="number">290</span>, <span class="number">341</span>]   <span class="comment"># 硕研报考人数（条形图高度数据）</span></span><br><span class="line">plt.bar(x, y, color=<span class="string">&#x27;b&#x27;</span>, width=<span class="number">0.45</span>, tick_label=x,</span><br><span class="line">        edgecolor=<span class="string">&#x27;k&#x27;</span>)             <span class="comment"># 条形的边框颜色</span></span><br><span class="line">plt.xticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.yticks(fontsize=<span class="number">12</span>)                                      <span class="comment"># 坐标轴刻度：字体大小</span></span><br><span class="line">plt.title(<span class="string">&#x27;我国硕士研究生报考人数(2016-2020年)&#x27;</span>, fontsize=<span class="number">13</span>)</span><br><span class="line"><span class="comment"># 添加文本数据</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">    plt.text(i-<span class="number">0.3</span>, y[i]+<span class="number">12</span>, <span class="built_in">str</span>(y[i])+<span class="string">&#x27;万人&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1bFXHcbIuh1twg0_JXP21BrjG5mk5wY3d" width height></center><h3 id="11-12利用例题11-11中数据，绘制考研录取人数的横放条形图"><a href="#11-12利用例题11-11中数据，绘制考研录取人数的横放条形图" class="headerlink" title="11.12利用例题11.11中数据，绘制考研录取人数的横放条形图"></a>11.12利用例题11.11中数据，绘制考研录取人数的横放条形图</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> axes</span><br><span class="line"></span><br><span class="line">f = plt.figure(figsize=(<span class="number">5</span>, <span class="number">3</span>), dpi=<span class="number">80</span>)                         <span class="comment"># 设置画布大小</span></span><br><span class="line">f.set_facecolor((<span class="number">0.92</span>, <span class="number">0.92</span>, <span class="number">0.96</span>))                            <span class="comment"># 设置坐标轴颜色</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">y = (<span class="string">&#x27;2016&#x27;</span>, <span class="string">&#x27;2017&#x27;</span>, <span class="string">&#x27;2018&#x27;</span>, <span class="string">&#x27;2019&#x27;</span>, <span class="string">&#x27;2020&#x27;</span>)     <span class="comment"># 条形图标签数据：年份（对应y轴）</span></span><br><span class="line">w = [<span class="number">59</span>, <span class="number">72.2</span>, <span class="number">76.3</span>, <span class="number">80</span>, <span class="number">111.4</span>]     <span class="comment"># 硕研录取人数（条形图宽度数据）</span></span><br><span class="line">c = [<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]                <span class="comment"># 条形图的颜色列表</span></span><br><span class="line">plt.barh(y, w, height=<span class="number">0.5</span>, color=c, tick_label=y)    <span class="comment"># 绘制横放条形图</span></span><br><span class="line">plt.title(<span class="string">&#x27;我国硕士研究生录取人数(2016-2020年)&#x27;</span>, fontsize=<span class="number">13</span>)</span><br><span class="line">plt.xticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.yticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;人数&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;年份&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(y)):</span><br><span class="line">    plt.text(w[i]+<span class="number">2</span>, y[i], <span class="built_in">str</span>(w[i])+<span class="string">&#x27;万人&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/16aGFHVKW3OEL2dVSOCYGkouylvzUy80u" width height></center><h3 id="11-13利用例题11-11数据，绘制高校毕业、硕研报考、录取人数的并列条形图"><a href="#11-13利用例题11-11数据，绘制高校毕业、硕研报考、录取人数的并列条形图" class="headerlink" title="11.13利用例题11-11数据，绘制高校毕业、硕研报考、录取人数的并列条形图"></a>11.13利用例题11-11数据，绘制高校毕业、硕研报考、录取人数的并列条形图</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">4</span>), dpi=<span class="number">80</span>)</span><br><span class="line">x = (<span class="string">&#x27;2016&#x27;</span>, <span class="string">&#x27;2017&#x27;</span>, <span class="string">&#x27;2018&#x27;</span>, <span class="string">&#x27;2019&#x27;</span>, <span class="string">&#x27;2020&#x27;</span>)     <span class="comment"># 条形图标签数据：年份（对应x轴）</span></span><br><span class="line">h1 = [<span class="number">765</span>, <span class="number">795</span>, <span class="number">820</span>, <span class="number">834</span>, <span class="number">874</span>]             <span class="comment"># 普通高校毕业人数</span></span><br><span class="line">h2 = [<span class="number">177</span>, <span class="number">201</span>, <span class="number">238</span>, <span class="number">290</span>, <span class="number">341</span>]          <span class="comment"># 硕研报考人数（条形图高度数据）</span></span><br><span class="line">h3 = [<span class="number">59</span>, <span class="number">72.2</span>, <span class="number">76.3</span>, <span class="number">80</span>, <span class="number">111.4</span>]            <span class="comment"># 硕研录取人数（条形图宽度数据）</span></span><br><span class="line">bar_width = <span class="number">0.6</span>                               <span class="comment"># 条形宽度</span></span><br><span class="line">bar1 = np.arange(<span class="number">0</span>, <span class="built_in">len</span>(x)*<span class="number">2</span>, <span class="number">2</span>)      <span class="comment"># 条形图1的横坐标位置</span></span><br><span class="line">bar2 = bar1 + bar_width                <span class="comment"># 条形图2的横坐标位置</span></span><br><span class="line">bar3 = bar2 + bar_width                <span class="comment"># 条形图2的横坐标位置</span></span><br><span class="line">plt.bar(bar1, height=h1, width=bar_width, color=<span class="string">&#x27;b&#x27;</span>, label=<span class="string">&#x27;毕业人数&#x27;</span>)</span><br><span class="line">plt.bar(bar2, height=h2, width=bar_width, color=<span class="string">&#x27;g&#x27;</span>, label=<span class="string">&#x27;报考人数&#x27;</span>)</span><br><span class="line">plt.bar(bar3, height=h3, width=bar_width, color=<span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;录取人数&#x27;</span>)</span><br><span class="line">plt.xticks(bar1 + bar_width, x, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">1200</span>)</span><br><span class="line">plt.yticks(fontsize=<span class="number">12</span>)                         <span class="comment"># 坐标轴范围、刻度：字体大小</span></span><br><span class="line">plt.title(<span class="string">&#x27;普通高校毕业、硕研报考、录取人数(2016-2020年)，单位：万人&#x27;</span>, fontsize=<span class="number">13</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;upper left&#x27;</span>)     <span class="comment"># 显示图例</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):       <span class="comment"># 添加文本数据</span></span><br><span class="line">    plt.text(i*<span class="number">2</span> - <span class="number">0.2</span>, h1[i] + <span class="number">12</span>, <span class="built_in">str</span>(h1[i]), fontsize=<span class="number">12</span>)</span><br><span class="line">    plt.text(i*<span class="number">2</span> + <span class="number">0.4</span>, h2[i] + <span class="number">12</span>, <span class="built_in">str</span>(h2[i]), fontsize=<span class="number">12</span>)</span><br><span class="line">    plt.text(i*<span class="number">2</span> + <span class="number">1.0</span>, h3[i] + <span class="number">12</span>, <span class="built_in">str</span>(h3[i]), fontsize=<span class="number">12</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1C_GX1eECcKlgGIbI0wPWPch211OSQ7NW" width height></center><h3 id="11-14据某一年度数据，我国部分地区各类在校学生总数2-82亿人，绘制饼图"><a href="#11-14据某一年度数据，我国部分地区各类在校学生总数2-82亿人，绘制饼图" class="headerlink" title="11.14据某一年度数据，我国部分地区各类在校学生总数2.82亿人，绘制饼图"></a>11.14据某一年度数据，我国部分地区各类在校学生总数2.82亿人，绘制饼图</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">label = [<span class="string">&quot;幼儿园&quot;</span>, <span class="string">&quot;小学生&quot;</span>, <span class="string">&quot;初中生&quot;</span>, <span class="string">&quot;高中生&quot;</span>, <span class="string">&quot;高校生&quot;</span>, <span class="string">&quot;研究生&quot;</span>, <span class="string">&quot;其他&quot;</span>]</span><br><span class="line">data = [<span class="number">4713.88</span>, <span class="number">10561.24</span>, <span class="number">4827.14</span>, <span class="number">3994.9</span>, <span class="number">3715.63</span>, <span class="number">286.37</span>, <span class="number">101</span>]</span><br><span class="line"><span class="comment"># 各项离饼图圆心为n个半径</span></span><br><span class="line">exp = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0.32</span>]</span><br><span class="line">plt.pie(x=data, labels=label, explode=exp, shadow=<span class="literal">True</span>)</span><br><span class="line">plt.pie(x=data, labels=label, explode=exp, shadow=<span class="literal">True</span>, autopct=<span class="string">&#x27;%1.0f%%&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1n8eeR0BqqOajKem-7pxm-lkGjqaI3XUQ" width height></center><p><strong>（由于某些不可抗力原因，绘制的统计图中的乱码问题仍在修复中……）</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​		Matplotlib 可能是 Python 2D-绘图领域使用最广泛的套件。它能让使用者很轻松地将数据图形化，并且提供多样化的输出格式；可与 NumPy 一起使用，提供了一种有效的 MatLab 开源替代方案。；它也可以和图形工具包一起使用，如 PyQt 和 wxPython。通过该工具包可以绘制线图、散点图、等高线图、条形图、柱状图、3D 图形、、甚至是图形动画等等。&lt;/p&gt;
&lt;p&gt;​		本篇将通过最近学习的Matplotlib 对数据进行统计绘制操作。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;（PS：因环境为Unbuntu22.04,未在Matplotlib 内实装中文字体；故图像有一定乱码问题，目前补救中……）&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="计算机科学" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python中Numpy库及其相关操作</title>
    <link href="http://example.com/2022/05/09/Python-Chapter10/"/>
    <id>http://example.com/2022/05/09/Python-Chapter10/</id>
    <published>2022-05-09T08:27:16.000Z</published>
    <updated>2022-05-12T12:07:34.785Z</updated>
    
    <content type="html"><![CDATA[<p>​NumPy(Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。</p><p>​NumPy 的前身 Numeric 最早是由 Jim Hugunin 与其它协作者共同开发，2005 年，Travis Oliphant 在 Numeric 中结合了另一个同性质的程序库 Numarray 的特色，并加入了其它扩展而开发了 NumPy。NumPy 为开放源代码并且由许多协作者共同维护开发。</p><p>​NumPy 是一个运行速度非常快的数学库，主要用于数组计算，包含：</p><p>​1. 一个强大的N维数组对象 ndarray</p><p>​2. 广播功能函数</p><p>​3. 整合 C&#x2F;C++&#x2F;Fortran 代码的工具</p><p>​4. 线性代数、傅里叶变换、随机数生成等功能</p><p>​之前学习了Numpy的一些内容，就运行一些实例以便于深入理解。</p><span id="more"></span><h3 id="10-1-1创建数组并查看数组属性"><a href="#10-1-1创建数组并查看数组属性" class="headerlink" title="10.1.1创建数组并查看数组属性"></a>10.1.1创建数组并查看数组属性</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np                        <span class="comment"># 导入Numpy库</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])             <span class="comment"># 创建的一维数组,参数为列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数组的尺寸：&quot;</span>, np.shape(arr1))      <span class="comment"># (4, )  ,  一个元素的元组，表示是一维数组</span></span><br><span class="line"></span><br><span class="line">arr2 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]])   <span class="comment"># 创建二维数组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数组的尺寸：&quot;</span>, np.shape(arr2))  <span class="comment"># 2个元素的元组:  (3, 4)</span></span><br><span class="line"><span class="comment"># 返回二维数组的行数：3</span></span><br><span class="line"><span class="built_in">print</span>(arr2.shape[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(arr2.shape[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1MuzSZjSt-aqZys8Iyyjuw5TtZs-QQd6I" width height></center><h3 id="10-1-2构造复杂数组"><a href="#10-1-2构造复杂数组" class="headerlink" title="10.1.2构造复杂数组"></a>10.1.2构造复杂数组</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">5</span>)                  <span class="comment"># a= [0 1 2 3 4]</span></span><br><span class="line">b = np.tile(a, <span class="number">2</span>)                    <span class="comment"># 对变量a重复2次：b = [0 1 2 3 4 0 1 2 3 4]</span></span><br><span class="line">c = np.tile(a, (<span class="number">3</span>, <span class="number">2</span>))               <span class="comment"># 对a 行重复3次，列重复2次</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重复元素: repeat,如:</span></span><br><span class="line">d = a.repeat(<span class="number">2</span>)  <span class="comment"># 对变量a里的元素依次重复2次： d= [0 0 1 1 2 2 3 3 4 4]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1B7yhFt2hxi7s9RHcmCoVp-egtybHJMt0" width height></center><h3 id="10-1-3生成随机数"><a href="#10-1-3生成随机数" class="headerlink" title="10.1.3生成随机数"></a>10.1.3生成随机数</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">A = np.random.rand(<span class="number">4</span>)               <span class="comment"># 生成区间[0,1)上的均匀分布的4个随机浮点数的一维数组</span></span><br><span class="line"><span class="built_in">print</span>(A)  <span class="comment"># [0.5488135  0.71518937 0.60276338 0.54488318]</span></span><br><span class="line">a = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]  <span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line">b = [np.random.choice(a) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]  <span class="comment"># 每次从 a 中随机返回一个元素，共迭代6次</span></span><br><span class="line"><span class="comment"># [3, 0, 3, 5, 0, 2]</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打乱数组顺序</span></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line">y = np.random.permutation(x)      <span class="comment"># x的数据不动，把随机打乱后的数据返给y</span></span><br><span class="line">np.random.shuffle(x)              <span class="comment"># 直接随机打乱数组x的数据</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1O4r3FmDCg5GnanK-qcJ8c8IbHBg1-A1g" width height></center><h3 id="10-2-1绘制：随机生成10000数据，服从均值为0，方差为1的正态分布的直方图（间隔个数：50）"><a href="#10-2-1绘制：随机生成10000数据，服从均值为0，方差为1的正态分布的直方图（间隔个数：50）" class="headerlink" title="10.2.1绘制：随机生成10000数据，服从均值为0，方差为1的正态分布的直方图（间隔个数：50）"></a>10.2.1绘制：随机生成10000数据，服从均值为0，方差为1的正态分布的直方图（间隔个数：50）</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">data = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, <span class="number">10000</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(data), <span class="built_in">max</span>(data))</span><br><span class="line">n, bins, patches = plt.hist(</span><br><span class="line">    data, <span class="number">50</span>, facecolor=<span class="string">&#x27;red&#x27;</span>, edgecolor=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1m3o5BAeYwpxynzqPs0hFadARkwKh3qBs" width height></center><h3 id="10-2-2通过索引访问数组"><a href="#10-2-2通过索引访问数组" class="headerlink" title="10.2.2通过索引访问数组"></a>10.2.2通过索引访问数组</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = np.arange(<span class="number">10</span>)  <span class="comment"># arr = [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">5</span>])  <span class="comment"># 首个索引号从0开始，输出：5</span></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">3</span>:<span class="number">5</span>])                      <span class="comment"># 索引号从第3个，到第4个，输出：[3  4]</span></span><br><span class="line"><span class="built_in">print</span>(arr[:<span class="number">5</span>])  <span class="comment"># 索引号从第0个，到第4个，输出：[0 1 2 3 4]</span></span><br><span class="line"><span class="built_in">print</span>(arr[-<span class="number">1</span>])                            <span class="comment"># -1表示数组最后一个元素：9</span></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">6</span>:-<span class="number">1</span>:<span class="number">2</span>])  <span class="comment"># 索引号从第6个，到最后一个，2为步长，表示每隔一个元素：[6 8]</span></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">5</span>:<span class="number">1</span>:-<span class="number">2</span>])  <span class="comment"># 步长为负数时，开始索引号必须大于结束索引号，输出：[5 3]</span></span><br><span class="line"></span><br><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]])</span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">2</span>, <span class="number">3</span>])            <span class="comment"># 索引号第2行第3列的元素，输出：10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">0</span>, <span class="number">3</span>:<span class="number">5</span>])          <span class="comment"># 索引号第0行中第3和4列的元素：[4 5]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">1</span>:, <span class="number">2</span>:])  <span class="comment"># 索引号第1行、第2列后面所有元素</span></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">1</span>:, <span class="number">2</span>:])  <span class="comment"># 索引号第1行、第2列后面所有元素</span></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">2</span>:])                         <span class="comment"># 索引号第2行所有列：[  7  8  9 10 11 ]</span></span><br><span class="line"><span class="built_in">print</span>(arr[:, <span class="number">2</span>])                        <span class="comment"># 索引号第2列所有行：[ 3  6  9 ]</span></span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1b875r80vcPRzkr5B6s7ZHY6xt102mPFZ" width height></center><h3 id="10-2-3数组的迭代"><a href="#10-2-3数组的迭代" class="headerlink" title="10.2.3数组的迭代"></a>10.2.3数组的迭代</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">2</span>, <span class="number">8</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27;,&#x27;</span>)  <span class="comment"># 2, 4, 6</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">enumerate</span>(a):</span><br><span class="line">    <span class="built_in">print</span>(i, i[<span class="number">0</span>], i[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/19_9aLn4150zCYXMni9txJBV5V4bKIwr8" width height></center><h3 id="10-2-4数组间的四则运算"><a href="#10-2-4数组间的四则运算" class="headerlink" title="10.2.4数组间的四则运算"></a>10.2.4数组间的四则运算</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">y = np.array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">z = np.array(<span class="string">&quot;1,2,3&quot;</span>)</span><br><span class="line"><span class="comment"># 数组元素对应相加，结果为：[5 7 9]</span></span><br><span class="line"><span class="built_in">print</span>(x + y)</span><br><span class="line"><span class="comment"># 数组元素对应相减，结果为：[-3 -3 -3]</span></span><br><span class="line"><span class="built_in">print</span>(x - y)</span><br><span class="line"><span class="comment"># 数组元素相乘，结果为：[4 10 18]</span></span><br><span class="line"><span class="built_in">print</span>(x * y)</span><br><span class="line"><span class="comment"># 数组元素对应相除，结果为：[0.25  0.4  0.5 ]</span></span><br><span class="line"><span class="built_in">print</span>(x / y)</span><br><span class="line"><span class="comment"># 数组元素对应幂运算，结果为：[ 1  32  729]</span></span><br><span class="line"><span class="built_in">print</span>(x ** y)</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1YGBbOIzWwofXDF_5gUN4-vqXZi7j62QP" width height></center><h3 id="10-3-1比较运算"><a href="#10-3-1比较运算" class="headerlink" title="10.3.1比较运算"></a>10.3.1比较运算</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line">y = np.array([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(x &lt; y)                           <span class="comment"># 输出：[ True  False  False]</span></span><br><span class="line"><span class="built_in">print</span>(x &gt;= y)                             <span class="comment"># 输出：[False  True  True]</span></span><br><span class="line"><span class="built_in">print</span>(x == y)                         <span class="comment"># 输出：[False  True  False]</span></span><br><span class="line"><span class="built_in">print</span>(x != y)                         <span class="comment"># 输出：[ True  False  True]</span></span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1d0fwCol4KDERL3BlIwZSt919K7C65_jm" width height></center><h3 id="10-3-2逻辑运算"><a href="#10-3-2逻辑运算" class="headerlink" title="10.3.2逻辑运算"></a>10.3.2逻辑运算</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line">y = np.array([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">all</span>(x == y))            <span class="comment"># 输出：False</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">all</span>(x != y))             <span class="comment"># 输出：False</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">any</span>(x != y))              <span class="comment"># 输出：True</span></span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/11jc3HOKXaoTAuQE0UBbZfPs55JW9coik" width height></center><h3 id="10-3-3数组的转置"><a href="#10-3-3数组的转置" class="headerlink" title="10.3.3数组的转置"></a>10.3.3数组的转置</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># np.shape(a) = (4,) 表示一维数组</span></span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">b = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]])    <span class="comment"># (3,4) 表示二维数组</span></span><br><span class="line"><span class="comment"># 一维数组 a 的转置：np.shape(c) = (4,)</span></span><br><span class="line">c = np.transpose(a)</span><br><span class="line"><span class="comment"># 二维数组 b 的转置：np.shape(d) = (4,3)</span></span><br><span class="line">d = np.transpose(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1ZPNBZNcToWnO4BtVKR3eoomk6yPeMEBt" width height></center><h3 id="10-3-4数组的点积运算"><a href="#10-3-4数组的点积运算" class="headerlink" title="10.3.4数组的点积运算"></a>10.3.4数组的点积运算</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])  <span class="comment"># (4,) 表示一维数组</span></span><br><span class="line">b = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]])    <span class="comment"># (3,4) 表示二维数组</span></span><br><span class="line">e = np.dot(b, a)  <span class="comment"># (3, 4) 与 (4,) 点积运算</span></span><br><span class="line"><span class="built_in">print</span>(np.shape(e), e)  <span class="comment"># (3,) [30 60 90]</span></span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1dgPwDu1Win85ycRbQn2REjeMQ6PNOtcp" width height></center><h3 id="10-3-5NumPy矩阵运算"><a href="#10-3-5NumPy矩阵运算" class="headerlink" title="10.3.5NumPy矩阵运算"></a>10.3.5NumPy矩阵运算</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">matr1 = np.matrix(<span class="string">&quot;1 2 3;0 5 6;0 0 9&quot;</span>)</span><br><span class="line">matr2 = matr1 * <span class="number">3</span>                               <span class="comment"># 矩阵数乘</span></span><br><span class="line">matr3 = matr1 + matr2                           <span class="comment"># 矩阵加法</span></span><br><span class="line">matr4 = matr1 - matr2                           <span class="comment"># 矩阵减法</span></span><br><span class="line">matr5 = matr1 * matr2                           <span class="comment"># 矩阵相乘（乘法）</span></span><br><span class="line">matrB = np.multiply(matr1, matr2)       <span class="comment"># 矩阵对应元素相乘</span></span><br><span class="line">matr6 = matr1.T                                     <span class="comment"># 矩阵的转置</span></span><br><span class="line">matr8 = matr1.H                                     <span class="comment"># 矩阵的共轭转置</span></span><br><span class="line">matr9 = matr1.I                                     <span class="comment"># 矩阵的逆</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(matr2)</span><br><span class="line"><span class="built_in">print</span>(matr3)</span><br><span class="line"><span class="built_in">print</span>(matr4)</span><br><span class="line"><span class="built_in">print</span>(matr5)</span><br><span class="line"><span class="built_in">print</span>(matr6)</span><br><span class="line"><span class="built_in">print</span>(matrB)</span><br><span class="line"><span class="built_in">print</span>(matr8)</span><br><span class="line"><span class="built_in">print</span>(matr9)</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/18T5quSorQL4b4yElrpedngGl9VmSAEf9" width height></center><h3 id="10-4-1数组、矩阵之间的线性代数运算"><a href="#10-4-1数组、矩阵之间的线性代数运算" class="headerlink" title="10.4.1数组、矩阵之间的线性代数运算"></a>10.4.1数组、矩阵之间的线性代数运算</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]])  <span class="comment"># x 为二维数组：形状为 (3,3)</span></span><br><span class="line"><span class="built_in">print</span>(np.linalg.det(x))                                <span class="comment"># x 对应矩阵的行列式，输出：-5</span></span><br><span class="line">y = np.linalg.inv(x)               <span class="comment"># x 对应矩阵的逆(AB=BA=E)，此时的 y 为二维数组：形状为 (3,3)</span></span><br><span class="line">a = np.dot(x, y)                      <span class="comment"># 数组 x 与 y 做点积运算，等价于两个矩阵相乘</span></span><br><span class="line">b = np.mat(x)*np.mat(y)  <span class="comment"># 将数组 x 与 y 转为矩阵，再做矩阵乘法，等价于 np.dot(x,y)</span></span><br><span class="line">c = x * y                              <span class="comment"># 数组x与y相乘，即两个数组对应元素相乘，注意：不同于np.dot(x,y)</span></span><br><span class="line"><span class="built_in">print</span>(a == b)                          <span class="comment"># 完全相同，全为True</span></span><br><span class="line">d = np.linalg.eigvals(x)       <span class="comment"># x 对应矩阵的特征值，返回的 d 为列表</span></span><br><span class="line"><span class="comment"># [-1.51154714+0.j  1.75577357+0.47447678j  1.75577357-0.47447678j ]</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">e = np.linalg.eig(x)  <span class="comment"># x 对应矩阵的特征值及特征向量，返回的 e 为元组</span></span><br><span class="line"><span class="built_in">print</span>(e[<span class="number">0</span>], e[<span class="number">1</span>])  <span class="comment"># e[0]为 x 的特征值，e[1]为 x 的特征向量</span></span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/17EQi3u2jeWTaF2Ft0O6TColwI0YI5Gc9" width height></center><h3 id="10-4-2保存一个数组"><a href="#10-4-2保存一个数组" class="headerlink" title="10.4.2保存一个数组"></a>10.4.2保存一个数组</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="comment"># np.save()只能保存一个数组</span></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line">np.save(<span class="string">&quot;save_arr&quot;</span>, arr)                          <span class="comment"># 保存时，默认后缀名为npy</span></span><br><span class="line">load_arr = np.load(<span class="string">&quot;save_arr.npy&quot;</span>)       <span class="comment"># 打开时，必须有后缀名 (若没写路径，默认为当前路径下)</span></span><br><span class="line"><span class="built_in">print</span>(load_arr)                                          <span class="comment"># 返回的是 &#x27;numpy.ndarray&#x27;</span></span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1dsC7xe46VkSF-vHNc2WzZmHt7hAtZMGp" width height></center><h3 id="10-4-3保存多个数组"><a href="#10-4-3保存多个数组" class="headerlink" title="10.4.3保存多个数组"></a>10.4.3保存多个数组</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将0-19共20个数，生成一个三维数组：（2,2,5）</span></span><br><span class="line">x = np.array(<span class="built_in">range</span>(<span class="number">20</span>)).reshape((<span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line">y = np.array(<span class="built_in">range</span>(<span class="number">10</span>, <span class="number">34</span>)).reshape(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment"># 将10-33共24个数，生成一个三维数组：（2,3,4）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;x:\n&#x27;</span>, x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;y:\n&#x27;</span>, y)</span><br><span class="line">filename = <span class="string">&#x27;test.npz&#x27;</span></span><br><span class="line"><span class="comment"># 写文件，如果不指定key，那么默认key为&#x27;arr_0&#x27;、&#x27;arr_1&#x27;，一直排下去。</span></span><br><span class="line">np.savez(filename, x, key_y=y)          <span class="comment"># 数组x没有指定键名，访问时用arr_0，数组y指定了键名</span></span><br><span class="line">c = np.load(filename)                   <span class="comment"># 读文件 ： 多个数组，通过键名访问</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;keys of NpzFile c:\n&#x27;</span>, c.keys())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c[&#x27;arr_0&#x27;]:\n&quot;</span>, c[<span class="string">&#x27;arr_0&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c[&#x27;key_y&#x27;]:\n&quot;</span>, c[<span class="string">&#x27;key_y&#x27;</span>])</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1FQ-TzIEuwVbZ2Y4nxeuG53AADpMDYJHi" width height></center><h3 id="10-5-1编写程序，读取数据，保存在文件-csv中"><a href="#10-5-1编写程序，读取数据，保存在文件-csv中" class="headerlink" title="10.5.1编写程序，读取数据，保存在文件.csv中"></a>10.5.1编写程序，读取数据，保存在文件.csv中</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编写程序，将这3个列数据，及对应的年份读取出来，保存在文件“历年总人口、新生人口和死亡人口.csv”中。</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wb = xlrd.open_workbook(<span class="string">&quot;历年总人口.xls&quot;</span>)</span><br><span class="line">sheet = wb.sheet_by_index(<span class="number">0</span>)                      <span class="comment"># 通过索引号0获取整个sheet数据</span></span><br><span class="line">col_0 = sheet.col_values(<span class="number">0</span>)                           <span class="comment"># 第0列数据，返回一个列表：年度</span></span><br><span class="line">col_1 = sheet.col_values(<span class="number">1</span>)                           <span class="comment"># 第1列数据，返回一个列表：总人口</span></span><br><span class="line"><span class="comment"># 年份：从第1个元素开始，到最后一个元素</span></span><br><span class="line">year = col_0[<span class="number">1</span>:]</span><br><span class="line"><span class="comment"># 总人口：从第1个元素开始，到最后一个元素</span></span><br><span class="line">total = col_1[<span class="number">1</span>:]</span><br><span class="line">year = [<span class="built_in">int</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> year]                           <span class="comment"># 用列表推导式，把每个元素转为整数</span></span><br><span class="line">total = [<span class="built_in">int</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> total]                         <span class="comment"># 用列表推导式，把每个元素转为整数</span></span><br><span class="line"></span><br><span class="line">wb = xlrd.open_workbook(<span class="string">&quot;历年新生人口和死亡人口.xls&quot;</span>)</span><br><span class="line">sheet = wb.sheet_by_index(<span class="number">0</span>)                  <span class="comment"># 通过索引号0获取整个sheet数据</span></span><br><span class="line">col_1 = sheet.col_values(<span class="number">1</span>)                   <span class="comment"># 通过列索引号1获取列内容：出生人口</span></span><br><span class="line">col_2 = sheet.col_values(<span class="number">2</span>)                   <span class="comment"># 通过列索引号2获取列内容：死亡人口</span></span><br><span class="line">add = col_1[<span class="number">1</span>:]                               <span class="comment"># 出生人口：从第1个元素开始，到最后一个元素</span></span><br><span class="line">die = col_2[<span class="number">1</span>:]                               <span class="comment"># 死亡人口：从第1个元素开始，到最后一个元素</span></span><br><span class="line">add = [<span class="built_in">int</span>(c[<span class="number">0</span>:-<span class="number">1</span>]) <span class="keyword">for</span> c <span class="keyword">in</span> add]             <span class="comment"># 用列表推导式，把最后一个‘万’字去掉</span></span><br><span class="line">die = [<span class="built_in">int</span>(c[<span class="number">0</span>:-<span class="number">1</span>]) <span class="keyword">for</span> c <span class="keyword">in</span> die]             <span class="comment"># 用列表推导式，把最后一个‘万’字去掉</span></span><br><span class="line">y = np.array(add)-np.array(die)               <span class="comment"># 将两个列表变成数组相减，生成每年净增人口</span></span><br><span class="line">m = <span class="built_in">len</span>(year)</span><br><span class="line"></span><br><span class="line">arr = np.array(year).reshape(m, <span class="number">1</span>)            <span class="comment"># 将年份的列表转为数组，形状调整为：（m，1）</span></span><br><span class="line">arr = np.insert(arr, <span class="number">1</span>, values=total, axis=<span class="number">1</span>)           <span class="comment"># 在第1列后面插入1列</span></span><br><span class="line">arr = np.insert(arr, <span class="number">2</span>, values=add, axis=<span class="number">1</span>)             <span class="comment"># 在第2列后面插入1列</span></span><br><span class="line">arr = np.insert(arr, <span class="number">3</span>, values=die, axis=<span class="number">1</span>)             <span class="comment"># 在第3列后面插入1列</span></span><br><span class="line">arr = np.insert(arr, <span class="number">4</span>, values=y, axis=<span class="number">1</span>)               <span class="comment"># 在第4列后面插入1列</span></span><br><span class="line"></span><br><span class="line">file = <span class="string">&#x27;大陆历年总人口、新生人口和死亡人口.csv&#x27;</span></span><br><span class="line">np.savetxt(file, arr, fmt=<span class="string">&#x27;%i&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>,</span><br><span class="line">           comments=<span class="string">&#x27;&#x27;</span>, header=<span class="string">&#x27;年份,总人口,出生人口,死亡人口,净增人口&#x27;</span>)</span><br><span class="line">x = np.loadtxt(file, dtype=np.<span class="built_in">int</span>, delimiter=<span class="string">&#x27;,&#x27;</span>, skiprows=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1ieXw859ZcEE8Vu5avju6pGBuYujQ6_zy" width height></center><h3 id="10-6-1读取-txt文件"><a href="#10-6-1读取-txt文件" class="headerlink" title="10.6.1读取.txt文件"></a>10.6.1读取.txt文件</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = np.loadtxt(<span class="string">&#x27;testSet.txt&#x27;</span>)                              <span class="comment"># 打开文本文件</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;返回的二维数组f的形状：&quot;</span>, np.shape(f))</span><br><span class="line"><span class="built_in">print</span>(f)</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/14I0IkQM8ZtPritX01-v_MwUzKaLgtp8Q" width height></center>]]></content>
    
    
    <summary type="html">&lt;p&gt;​		NumPy(Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。&lt;/p&gt;
&lt;p&gt;​		NumPy 的前身 Numeric 最早是由 Jim Hugunin 与其它协作者共同开发，2005 年，Travis Oliphant 在 Numeric 中结合了另一个同性质的程序库 Numarray 的特色，并加入了其它扩展而开发了 NumPy。NumPy 为开放源代码并且由许多协作者共同维护开发。&lt;/p&gt;
&lt;p&gt;​		NumPy 是一个运行速度非常快的数学库，主要用于数组计算，包含：&lt;/p&gt;
&lt;p&gt;​				1. 一个强大的N维数组对象 ndarray&lt;/p&gt;
&lt;p&gt;​				2. 广播功能函数&lt;/p&gt;
&lt;p&gt;​				3. 整合 C&amp;#x2F;C++&amp;#x2F;Fortran 代码的工具&lt;/p&gt;
&lt;p&gt;​				4. 线性代数、傅里叶变换、随机数生成等功能&lt;/p&gt;
&lt;p&gt;​		之前学习了Numpy的一些内容，就运行一些实例以便于深入理解。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机科学" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
</feed>
