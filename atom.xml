<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蟹黄の小窝</title>
  
  <subtitle>你这一辈子......有没有为别人拼过命</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-09T13:04:06.610Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Mantis</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python中Numpy库及其相关操作</title>
    <link href="http://example.com/2022/05/09/Python-Chapter10/"/>
    <id>http://example.com/2022/05/09/Python-Chapter10/</id>
    <published>2022-05-09T08:27:16.000Z</published>
    <updated>2022-05-09T13:04:06.610Z</updated>
    
    <content type="html"><![CDATA[<p>​NumPy(Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。</p><p>​NumPy 的前身 Numeric 最早是由 Jim Hugunin 与其它协作者共同开发，2005 年，Travis Oliphant 在 Numeric 中结合了另一个同性质的程序库 Numarray 的特色，并加入了其它扩展而开发了 NumPy。NumPy 为开放源代码并且由许多协作者共同维护开发。</p><p>​NumPy 是一个运行速度非常快的数学库，主要用于数组计算，包含：</p><p>​1. 一个强大的N维数组对象 ndarray</p><p>​2. 广播功能函数</p><p>​3. 整合 C&#x2F;C++&#x2F;Fortran 代码的工具</p><p>​4. 线性代数、傅里叶变换、随机数生成等功能</p><p>​之前学习了Numpy的一些内容，就运行一些实例以便于深入理解。</p><span id="more"></span><h3 id="10-1-1创建数组并查看数组属性"><a href="#10-1-1创建数组并查看数组属性" class="headerlink" title="10.1.1创建数组并查看数组属性"></a>10.1.1创建数组并查看数组属性</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np                        <span class="comment"># 导入Numpy库</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])             <span class="comment"># 创建的一维数组,参数为列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数组的尺寸：&quot;</span>, np.shape(arr1))      <span class="comment"># (4, )  ,  一个元素的元组，表示是一维数组</span></span><br><span class="line"></span><br><span class="line">arr2 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]])   <span class="comment"># 创建二维数组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数组的尺寸：&quot;</span>, np.shape(arr2))  <span class="comment"># 2个元素的元组:  (3, 4)</span></span><br><span class="line"><span class="comment"># 返回二维数组的行数：3</span></span><br><span class="line"><span class="built_in">print</span>(arr2.shape[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(arr2.shape[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1MuzSZjSt-aqZys8Iyyjuw5TtZs-QQd6I" width height></center><h3 id="10-1-2构造复杂数组"><a href="#10-1-2构造复杂数组" class="headerlink" title="10.1.2构造复杂数组"></a>10.1.2构造复杂数组</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">5</span>)                  <span class="comment"># a= [0 1 2 3 4]</span></span><br><span class="line">b = np.tile(a, <span class="number">2</span>)                    <span class="comment"># 对变量a重复2次：b = [0 1 2 3 4 0 1 2 3 4]</span></span><br><span class="line">c = np.tile(a, (<span class="number">3</span>, <span class="number">2</span>))               <span class="comment"># 对a 行重复3次，列重复2次</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重复元素: repeat,如:</span></span><br><span class="line">d = a.repeat(<span class="number">2</span>)  <span class="comment"># 对变量a里的元素依次重复2次： d= [0 0 1 1 2 2 3 3 4 4]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1B7yhFt2hxi7s9RHcmCoVp-egtybHJMt0" width height></center><h3 id="10-1-3生成随机数"><a href="#10-1-3生成随机数" class="headerlink" title="10.1.3生成随机数"></a>10.1.3生成随机数</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">A = np.random.rand(<span class="number">4</span>)               <span class="comment"># 生成区间[0,1)上的均匀分布的4个随机浮点数的一维数组</span></span><br><span class="line"><span class="built_in">print</span>(A)  <span class="comment"># [0.5488135  0.71518937 0.60276338 0.54488318]</span></span><br><span class="line">a = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]  <span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line">b = [np.random.choice(a) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]  <span class="comment"># 每次从 a 中随机返回一个元素，共迭代6次</span></span><br><span class="line"><span class="comment"># [3, 0, 3, 5, 0, 2]</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打乱数组顺序</span></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line">y = np.random.permutation(x)      <span class="comment"># x的数据不动，把随机打乱后的数据返给y</span></span><br><span class="line">np.random.shuffle(x)              <span class="comment"># 直接随机打乱数组x的数据</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1O4r3FmDCg5GnanK-qcJ8c8IbHBg1-A1g" width height></center><h3 id="10-2-1绘制：随机生成10000数据，服从均值为0，方差为1的正态分布的直方图（间隔个数：50）"><a href="#10-2-1绘制：随机生成10000数据，服从均值为0，方差为1的正态分布的直方图（间隔个数：50）" class="headerlink" title="10.2.1绘制：随机生成10000数据，服从均值为0，方差为1的正态分布的直方图（间隔个数：50）"></a>10.2.1绘制：随机生成10000数据，服从均值为0，方差为1的正态分布的直方图（间隔个数：50）</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">data = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, <span class="number">10000</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(data), <span class="built_in">max</span>(data))</span><br><span class="line">n, bins, patches = plt.hist(</span><br><span class="line">    data, <span class="number">50</span>, facecolor=<span class="string">&#x27;red&#x27;</span>, edgecolor=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1m3o5BAeYwpxynzqPs0hFadARkwKh3qBs" width height></center><h3 id="10-2-2通过索引访问数组"><a href="#10-2-2通过索引访问数组" class="headerlink" title="10.2.2通过索引访问数组"></a>10.2.2通过索引访问数组</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = np.arange(<span class="number">10</span>)  <span class="comment"># arr = [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">5</span>])  <span class="comment"># 首个索引号从0开始，输出：5</span></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">3</span>:<span class="number">5</span>])                      <span class="comment"># 索引号从第3个，到第4个，输出：[3  4]</span></span><br><span class="line"><span class="built_in">print</span>(arr[:<span class="number">5</span>])  <span class="comment"># 索引号从第0个，到第4个，输出：[0 1 2 3 4]</span></span><br><span class="line"><span class="built_in">print</span>(arr[-<span class="number">1</span>])                            <span class="comment"># -1表示数组最后一个元素：9</span></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">6</span>:-<span class="number">1</span>:<span class="number">2</span>])  <span class="comment"># 索引号从第6个，到最后一个，2为步长，表示每隔一个元素：[6 8]</span></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">5</span>:<span class="number">1</span>:-<span class="number">2</span>])  <span class="comment"># 步长为负数时，开始索引号必须大于结束索引号，输出：[5 3]</span></span><br><span class="line"></span><br><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]])</span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">2</span>, <span class="number">3</span>])            <span class="comment"># 索引号第2行第3列的元素，输出：10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">0</span>, <span class="number">3</span>:<span class="number">5</span>])          <span class="comment"># 索引号第0行中第3和4列的元素：[4 5]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">1</span>:, <span class="number">2</span>:])  <span class="comment"># 索引号第1行、第2列后面所有元素</span></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">1</span>:, <span class="number">2</span>:])  <span class="comment"># 索引号第1行、第2列后面所有元素</span></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">2</span>:])                         <span class="comment"># 索引号第2行所有列：[  7  8  9 10 11 ]</span></span><br><span class="line"><span class="built_in">print</span>(arr[:, <span class="number">2</span>])                        <span class="comment"># 索引号第2列所有行：[ 3  6  9 ]</span></span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1b875r80vcPRzkr5B6s7ZHY6xt102mPFZ" width height></center><h3 id="10-2-3数组的迭代"><a href="#10-2-3数组的迭代" class="headerlink" title="10.2.3数组的迭代"></a>10.2.3数组的迭代</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">2</span>, <span class="number">8</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27;,&#x27;</span>)  <span class="comment"># 2, 4, 6</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">enumerate</span>(a):</span><br><span class="line">    <span class="built_in">print</span>(i, i[<span class="number">0</span>], i[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/19_9aLn4150zCYXMni9txJBV5V4bKIwr8" width height></center><h3 id="10-2-4数组间的四则运算"><a href="#10-2-4数组间的四则运算" class="headerlink" title="10.2.4数组间的四则运算"></a>10.2.4数组间的四则运算</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">y = np.array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">z = np.array(<span class="string">&quot;1,2,3&quot;</span>)</span><br><span class="line"><span class="comment"># 数组元素对应相加，结果为：[5 7 9]</span></span><br><span class="line"><span class="built_in">print</span>(x + y)</span><br><span class="line"><span class="comment"># 数组元素对应相减，结果为：[-3 -3 -3]</span></span><br><span class="line"><span class="built_in">print</span>(x - y)</span><br><span class="line"><span class="comment"># 数组元素相乘，结果为：[4 10 18]</span></span><br><span class="line"><span class="built_in">print</span>(x * y)</span><br><span class="line"><span class="comment"># 数组元素对应相除，结果为：[0.25  0.4  0.5 ]</span></span><br><span class="line"><span class="built_in">print</span>(x / y)</span><br><span class="line"><span class="comment"># 数组元素对应幂运算，结果为：[ 1  32  729]</span></span><br><span class="line"><span class="built_in">print</span>(x ** y)</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1YGBbOIzWwofXDF_5gUN4-vqXZi7j62QP" width height></center><h3 id="10-3-1比较运算"><a href="#10-3-1比较运算" class="headerlink" title="10.3.1比较运算"></a>10.3.1比较运算</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line">y = np.array([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(x &lt; y)                           <span class="comment"># 输出：[ True  False  False]</span></span><br><span class="line"><span class="built_in">print</span>(x &gt;= y)                             <span class="comment"># 输出：[False  True  True]</span></span><br><span class="line"><span class="built_in">print</span>(x == y)                         <span class="comment"># 输出：[False  True  False]</span></span><br><span class="line"><span class="built_in">print</span>(x != y)                         <span class="comment"># 输出：[ True  False  True]</span></span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1d0fwCol4KDERL3BlIwZSt919K7C65_jm" width height></center><h3 id="10-3-2逻辑运算"><a href="#10-3-2逻辑运算" class="headerlink" title="10.3.2逻辑运算"></a>10.3.2逻辑运算</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line">y = np.array([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">all</span>(x == y))            <span class="comment"># 输出：False</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">all</span>(x != y))             <span class="comment"># 输出：False</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">any</span>(x != y))              <span class="comment"># 输出：True</span></span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/11jc3HOKXaoTAuQE0UBbZfPs55JW9coik" width height></center><h3 id="10-3-3数组的转置"><a href="#10-3-3数组的转置" class="headerlink" title="10.3.3数组的转置"></a>10.3.3数组的转置</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># np.shape(a) = (4,) 表示一维数组</span></span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">b = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]])    <span class="comment"># (3,4) 表示二维数组</span></span><br><span class="line"><span class="comment"># 一维数组 a 的转置：np.shape(c) = (4,)</span></span><br><span class="line">c = np.transpose(a)</span><br><span class="line"><span class="comment"># 二维数组 b 的转置：np.shape(d) = (4,3)</span></span><br><span class="line">d = np.transpose(b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1ZPNBZNcToWnO4BtVKR3eoomk6yPeMEBt" width height></center><h3 id="10-3-4数组的点积运算"><a href="#10-3-4数组的点积运算" class="headerlink" title="10.3.4数组的点积运算"></a>10.3.4数组的点积运算</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])  <span class="comment"># (4,) 表示一维数组</span></span><br><span class="line">b = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]])    <span class="comment"># (3,4) 表示二维数组</span></span><br><span class="line">e = np.dot(b, a)  <span class="comment"># (3, 4) 与 (4,) 点积运算</span></span><br><span class="line"><span class="built_in">print</span>(np.shape(e), e)  <span class="comment"># (3,) [30 60 90]</span></span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1dgPwDu1Win85ycRbQn2REjeMQ6PNOtcp" width height></center><h3 id="10-3-5NumPy矩阵运算"><a href="#10-3-5NumPy矩阵运算" class="headerlink" title="10.3.5NumPy矩阵运算"></a>10.3.5NumPy矩阵运算</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">matr1 = np.matrix(<span class="string">&quot;1 2 3;0 5 6;0 0 9&quot;</span>)</span><br><span class="line">matr2 = matr1 * <span class="number">3</span>                               <span class="comment"># 矩阵数乘</span></span><br><span class="line">matr3 = matr1 + matr2                           <span class="comment"># 矩阵加法</span></span><br><span class="line">matr4 = matr1 - matr2                           <span class="comment"># 矩阵减法</span></span><br><span class="line">matr5 = matr1 * matr2                           <span class="comment"># 矩阵相乘（乘法）</span></span><br><span class="line">matrB = np.multiply(matr1, matr2)       <span class="comment"># 矩阵对应元素相乘</span></span><br><span class="line">matr6 = matr1.T                                     <span class="comment"># 矩阵的转置</span></span><br><span class="line">matr8 = matr1.H                                     <span class="comment"># 矩阵的共轭转置</span></span><br><span class="line">matr9 = matr1.I                                     <span class="comment"># 矩阵的逆</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(matr2)</span><br><span class="line"><span class="built_in">print</span>(matr3)</span><br><span class="line"><span class="built_in">print</span>(matr4)</span><br><span class="line"><span class="built_in">print</span>(matr5)</span><br><span class="line"><span class="built_in">print</span>(matr6)</span><br><span class="line"><span class="built_in">print</span>(matrB)</span><br><span class="line"><span class="built_in">print</span>(matr8)</span><br><span class="line"><span class="built_in">print</span>(matr9)</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/18T5quSorQL4b4yElrpedngGl9VmSAEf9" width height></center><h3 id="10-4-1数组、矩阵之间的线性代数运算"><a href="#10-4-1数组、矩阵之间的线性代数运算" class="headerlink" title="10.4.1数组、矩阵之间的线性代数运算"></a>10.4.1数组、矩阵之间的线性代数运算</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]])  <span class="comment"># x 为二维数组：形状为 (3,3)</span></span><br><span class="line"><span class="built_in">print</span>(np.linalg.det(x))                                <span class="comment"># x 对应矩阵的行列式，输出：-5</span></span><br><span class="line">y = np.linalg.inv(x)               <span class="comment"># x 对应矩阵的逆(AB=BA=E)，此时的 y 为二维数组：形状为 (3,3)</span></span><br><span class="line">a = np.dot(x, y)                      <span class="comment"># 数组 x 与 y 做点积运算，等价于两个矩阵相乘</span></span><br><span class="line">b = np.mat(x)*np.mat(y)  <span class="comment"># 将数组 x 与 y 转为矩阵，再做矩阵乘法，等价于 np.dot(x,y)</span></span><br><span class="line">c = x * y                              <span class="comment"># 数组x与y相乘，即两个数组对应元素相乘，注意：不同于np.dot(x,y)</span></span><br><span class="line"><span class="built_in">print</span>(a == b)                          <span class="comment"># 完全相同，全为True</span></span><br><span class="line">d = np.linalg.eigvals(x)       <span class="comment"># x 对应矩阵的特征值，返回的 d 为列表</span></span><br><span class="line"><span class="comment"># [-1.51154714+0.j  1.75577357+0.47447678j  1.75577357-0.47447678j ]</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">e = np.linalg.eig(x)  <span class="comment"># x 对应矩阵的特征值及特征向量，返回的 e 为元组</span></span><br><span class="line"><span class="built_in">print</span>(e[<span class="number">0</span>], e[<span class="number">1</span>])  <span class="comment"># e[0]为 x 的特征值，e[1]为 x 的特征向量</span></span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/17EQi3u2jeWTaF2Ft0O6TColwI0YI5Gc9" width height></center><h3 id="10-4-2保存一个数组"><a href="#10-4-2保存一个数组" class="headerlink" title="10.4.2保存一个数组"></a>10.4.2保存一个数组</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="comment"># np.save()只能保存一个数组</span></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line">np.save(<span class="string">&quot;save_arr&quot;</span>, arr)                          <span class="comment"># 保存时，默认后缀名为npy</span></span><br><span class="line">load_arr = np.load(<span class="string">&quot;save_arr.npy&quot;</span>)       <span class="comment"># 打开时，必须有后缀名 (若没写路径，默认为当前路径下)</span></span><br><span class="line"><span class="built_in">print</span>(load_arr)                                          <span class="comment"># 返回的是 &#x27;numpy.ndarray&#x27;</span></span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1dsC7xe46VkSF-vHNc2WzZmHt7hAtZMGp" width height></center><h3 id="10-4-3保存多个数组"><a href="#10-4-3保存多个数组" class="headerlink" title="10.4.3保存多个数组"></a>10.4.3保存多个数组</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将0-19共20个数，生成一个三维数组：（2,2,5）</span></span><br><span class="line">x = np.array(<span class="built_in">range</span>(<span class="number">20</span>)).reshape((<span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line">y = np.array(<span class="built_in">range</span>(<span class="number">10</span>, <span class="number">34</span>)).reshape(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment"># 将10-33共24个数，生成一个三维数组：（2,3,4）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;x:\n&#x27;</span>, x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;y:\n&#x27;</span>, y)</span><br><span class="line">filename = <span class="string">&#x27;test.npz&#x27;</span></span><br><span class="line"><span class="comment"># 写文件，如果不指定key，那么默认key为&#x27;arr_0&#x27;、&#x27;arr_1&#x27;，一直排下去。</span></span><br><span class="line">np.savez(filename, x, key_y=y)          <span class="comment"># 数组x没有指定键名，访问时用arr_0，数组y指定了键名</span></span><br><span class="line">c = np.load(filename)                   <span class="comment"># 读文件 ： 多个数组，通过键名访问</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;keys of NpzFile c:\n&#x27;</span>, c.keys())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c[&#x27;arr_0&#x27;]:\n&quot;</span>, c[<span class="string">&#x27;arr_0&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c[&#x27;key_y&#x27;]:\n&quot;</span>, c[<span class="string">&#x27;key_y&#x27;</span>])</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1FQ-TzIEuwVbZ2Y4nxeuG53AADpMDYJHi" width height></center><h3 id="10-5-1编写程序，读取数据，保存在文件-csv中"><a href="#10-5-1编写程序，读取数据，保存在文件-csv中" class="headerlink" title="10.5.1编写程序，读取数据，保存在文件.csv中"></a>10.5.1编写程序，读取数据，保存在文件.csv中</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编写程序，将这3个列数据，及对应的年份读取出来，保存在文件“历年总人口、新生人口和死亡人口.csv”中。</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wb = xlrd.open_workbook(<span class="string">&quot;历年总人口.xls&quot;</span>)</span><br><span class="line">sheet = wb.sheet_by_index(<span class="number">0</span>)                      <span class="comment"># 通过索引号0获取整个sheet数据</span></span><br><span class="line">col_0 = sheet.col_values(<span class="number">0</span>)                           <span class="comment"># 第0列数据，返回一个列表：年度</span></span><br><span class="line">col_1 = sheet.col_values(<span class="number">1</span>)                           <span class="comment"># 第1列数据，返回一个列表：总人口</span></span><br><span class="line"><span class="comment"># 年份：从第1个元素开始，到最后一个元素</span></span><br><span class="line">year = col_0[<span class="number">1</span>:]</span><br><span class="line"><span class="comment"># 总人口：从第1个元素开始，到最后一个元素</span></span><br><span class="line">total = col_1[<span class="number">1</span>:]</span><br><span class="line">year = [<span class="built_in">int</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> year]                           <span class="comment"># 用列表推导式，把每个元素转为整数</span></span><br><span class="line">total = [<span class="built_in">int</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> total]                         <span class="comment"># 用列表推导式，把每个元素转为整数</span></span><br><span class="line"></span><br><span class="line">wb = xlrd.open_workbook(<span class="string">&quot;历年新生人口和死亡人口.xls&quot;</span>)</span><br><span class="line">sheet = wb.sheet_by_index(<span class="number">0</span>)                  <span class="comment"># 通过索引号0获取整个sheet数据</span></span><br><span class="line">col_1 = sheet.col_values(<span class="number">1</span>)                   <span class="comment"># 通过列索引号1获取列内容：出生人口</span></span><br><span class="line">col_2 = sheet.col_values(<span class="number">2</span>)                   <span class="comment"># 通过列索引号2获取列内容：死亡人口</span></span><br><span class="line">add = col_1[<span class="number">1</span>:]                               <span class="comment"># 出生人口：从第1个元素开始，到最后一个元素</span></span><br><span class="line">die = col_2[<span class="number">1</span>:]                               <span class="comment"># 死亡人口：从第1个元素开始，到最后一个元素</span></span><br><span class="line">add = [<span class="built_in">int</span>(c[<span class="number">0</span>:-<span class="number">1</span>]) <span class="keyword">for</span> c <span class="keyword">in</span> add]             <span class="comment"># 用列表推导式，把最后一个‘万’字去掉</span></span><br><span class="line">die = [<span class="built_in">int</span>(c[<span class="number">0</span>:-<span class="number">1</span>]) <span class="keyword">for</span> c <span class="keyword">in</span> die]             <span class="comment"># 用列表推导式，把最后一个‘万’字去掉</span></span><br><span class="line">y = np.array(add)-np.array(die)               <span class="comment"># 将两个列表变成数组相减，生成每年净增人口</span></span><br><span class="line">m = <span class="built_in">len</span>(year)</span><br><span class="line"></span><br><span class="line">arr = np.array(year).reshape(m, <span class="number">1</span>)            <span class="comment"># 将年份的列表转为数组，形状调整为：（m，1）</span></span><br><span class="line">arr = np.insert(arr, <span class="number">1</span>, values=total, axis=<span class="number">1</span>)           <span class="comment"># 在第1列后面插入1列</span></span><br><span class="line">arr = np.insert(arr, <span class="number">2</span>, values=add, axis=<span class="number">1</span>)             <span class="comment"># 在第2列后面插入1列</span></span><br><span class="line">arr = np.insert(arr, <span class="number">3</span>, values=die, axis=<span class="number">1</span>)             <span class="comment"># 在第3列后面插入1列</span></span><br><span class="line">arr = np.insert(arr, <span class="number">4</span>, values=y, axis=<span class="number">1</span>)               <span class="comment"># 在第4列后面插入1列</span></span><br><span class="line"></span><br><span class="line">file = <span class="string">&#x27;大陆历年总人口、新生人口和死亡人口.csv&#x27;</span></span><br><span class="line">np.savetxt(file, arr, fmt=<span class="string">&#x27;%i&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>,</span><br><span class="line">           comments=<span class="string">&#x27;&#x27;</span>, header=<span class="string">&#x27;年份,总人口,出生人口,死亡人口,净增人口&#x27;</span>)</span><br><span class="line">x = np.loadtxt(file, dtype=np.<span class="built_in">int</span>, delimiter=<span class="string">&#x27;,&#x27;</span>, skiprows=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/1ieXw859ZcEE8Vu5avju6pGBuYujQ6_zy" width height></center><h3 id="10-6-1读取-txt文件"><a href="#10-6-1读取-txt文件" class="headerlink" title="10.6.1读取.txt文件"></a>10.6.1读取.txt文件</h3><p>​代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = np.loadtxt(<span class="string">&#x27;testSet.txt&#x27;</span>)                              <span class="comment"># 打开文本文件</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;返回的二维数组f的形状：&quot;</span>, np.shape(f))</span><br><span class="line"><span class="built_in">print</span>(f)</span><br></pre></td></tr></table></figure><p>​运行结果：</p><center><img src="https://lh3.googleusercontent.com/u/0/d/14I0IkQM8ZtPritX01-v_MwUzKaLgtp8Q" width height></center>]]></content>
    
    
    <summary type="html">&lt;p&gt;​		NumPy(Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。&lt;/p&gt;
&lt;p&gt;​		NumPy 的前身 Numeric 最早是由 Jim Hugunin 与其它协作者共同开发，2005 年，Travis Oliphant 在 Numeric 中结合了另一个同性质的程序库 Numarray 的特色，并加入了其它扩展而开发了 NumPy。NumPy 为开放源代码并且由许多协作者共同维护开发。&lt;/p&gt;
&lt;p&gt;​		NumPy 是一个运行速度非常快的数学库，主要用于数组计算，包含：&lt;/p&gt;
&lt;p&gt;​				1. 一个强大的N维数组对象 ndarray&lt;/p&gt;
&lt;p&gt;​				2. 广播功能函数&lt;/p&gt;
&lt;p&gt;​				3. 整合 C&amp;#x2F;C++&amp;#x2F;Fortran 代码的工具&lt;/p&gt;
&lt;p&gt;​				4. 线性代数、傅里叶变换、随机数生成等功能&lt;/p&gt;
&lt;p&gt;​		之前学习了Numpy的一些内容，就运行一些实例以便于深入理解。&lt;/p&gt;</summary>
    
    
    
    
    <category term="-Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
</feed>
